package com.royalixor.enet;

import java.util.Arrays;
import java.util.logging.Logger;

import com.royalixor.enet.core.CommonProxxy;
import com.royalixor.enet.core.util.ModInfo;

import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.Mod.EventHandler;
import cpw.mods.fml.common.Mod.Instance;
import cpw.mods.fml.common.FMLLog;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.SidedProxy;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.network.NetworkMod;
import cpw.mods.fml.common.network.NetworkRegistry;

@Mod(modid = ModInfo.ID, name = ModInfo.NAME, version = ModInfo.VERSION, useMetadata = true)
@NetworkMod(clientSideRequired = true, channels = { ModInfo.CHANNEL })
public class EnergyNET {
	
	@Instance(ModInfo.ID)
	public static EnergyNET instance;
	@Mod.Metadata(ModInfo.ID)
	public static ModMetadata metadata;
	@SidedProxy(clientSide = "com.royalixor.enet.core.ClientProxy", serverSide = "com.royalixor.enet.core.CommonProxy")
	public static CommonProxxy proxy;
	
	public static final Logger LOGGER = Logger.getLogger(ModInfo.NAME);
	
	@EventHandler
	public void preInit(FMLPreInitializationEvent event) {
		LOGGER.setParent(FMLLog.getLogger());
		NetworkRegistry.instance().registerGuiHandler(this,  proxy);
	}
	
	@EventHandler
	public void load(FMLInitializationEvent event) {
		
		// Write metadata information
		metadata.modId = ModInfo.ID;
		metadata.name = ModInfo.NAME;
		metadata.description = "Something awesome is coming...be waiting.";
		metadata.url = "http://www.royalixor.com/project/EnergyNET";
		metadata.logoFile = "/enet_logo.png";
		metadata.version = ModInfo.VERSION + "." + ModInfo.BUILD_VERSION;
		metadata.authorList = Arrays.asList(new String[] { "Royalixor" });
		metadata.credits = "Please visit the website for further credits.";
		metadata.autogenerated = false;
	}
	
	@EventHandler
	public void modsLoaded(FMLPostInitializationEvent event) {
		
	}
}
